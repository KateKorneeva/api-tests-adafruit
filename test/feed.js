import test from 'ava';
import {
    getApi,
    auth,
    logout,
    responseErrMessage as err,
    createFeed,
    validateBySchema
} from './helpers/shortcuts';
import { ADAFRUIT_IO_USERNAME as user } from './helpers/fixtures';
import feedSchema from './helpers/schemas/feed.json';

test.before('Create feed', async t => {
    // Authorise
    t.context.api = await getApi();
    auth(t.context.api);

    t.context.feed = await createFeed(t, t.context.api);
});

test.beforeEach('Authorise', async t => {
    t.context.api = await getApi();
    auth(t.context.api);
});

test('Create feed works', async t => {
    const feed = { name: 'autotest-feed', description: 'feed generated by api autotest'};
    const resp  = await t.context.api.post('/feeds', feed);
    t.is(resp.status, 201, err(resp));
    
    validateBySchema(t, resp.data, feedSchema);
});

// Serial because logout influences parallel tests otherwise
test.serial('Create feed fails without token', async t => {
    logout(t.context.api);

    const feed = { name: 'autotest-feed', description: 'feed generated by api autotest'};
    const resp  = await t.context.api.post('/feeds', feed);
    t.is(resp.status, 401, err(resp));
});

async function createFeedMacro(t, feedObject, expected) {
    const resp  = await t.context.api.post('/feeds', feedObject);
    t.is(resp.status, expected, err(resp));
};
createFeedMacro.title = (providedTitle = '', feedObject, expected) => `Create feed with ${ JSON.stringify(feedObject) } returns status ${ JSON.stringify(expected, null, 2) }. ${providedTitle}`.trim();


test(createFeedMacro, {name: null, description: null}, 400);
test(createFeedMacro, {name: null, description: 'test0'}, 400);
test(createFeedMacro, {name: 'test0', description: null}, 201);
test(createFeedMacro, {name: undefined, description: undefined}, 400);
test(createFeedMacro, {name: 'test1'}, 201);
test('Without name feed is not created', createFeedMacro, {description: 'test1'}, 400);

test('Create feed with not unique name fails', async t => {
    const feed = { name: 'autotest-feed-not-unique'};
    const resp1  = await t.context.api.post('/feeds', feed);
    t.is(resp1.status, 201, err(resp1));

    const resp2  = await t.context.api.post('/feeds', feed);
    t.is(resp2.status, 400, err(resp2));
});

test('Get all feeds works', async t => {
    const resp = await t.context.api.get('/feeds');
    t.is(resp.status, 200, err(resp));
    t.is(resp.data[0].owner.username, user);
});

// Serial because logout influences parallel tests otherwise
test.serial('Get all feeds returns empty result without token', async t => {
    logout(t.context.api);

    const resp = await t.context.api.get('/feeds');
    t.is(resp.status, 200, err(resp));
    t.deepEqual(resp.data, []);
});

test('Delete feed works', async t => {
    // Create feed
    const feedObject = { name: 'autotest-feed-to-delete', description: 'feed generated by api autotest to delete'};
    const feed = await createFeed(t, t.context.api, feedObject);

    const respDelete = await t.context.api.delete(`/feeds/${feed.key}`);
    t.is(respDelete.status, 200, err(respDelete));
});

test('Get feed by id works', async t => {
    const resp = await t.context.api.get(`/feeds/${t.context.feed.key}`);
    t.is(resp.status, 200, err(resp));
    t.is(resp.data.owner.username, user);
});

// Serial because logout influences parallel tests otherwise
test.serial('Get feed by id fails without token', async t => {
    logout(t.context.api);

    const resp = await t.context.api.get(`/feeds/${t.context.feed.key}`);
    t.is(resp.status, 404, err(resp));
});