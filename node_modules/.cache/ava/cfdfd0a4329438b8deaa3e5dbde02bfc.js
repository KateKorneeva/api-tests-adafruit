"use strict";

var _ava = _interopRequireDefault(require("ava"));

var _shortcuts = require("./helpers/shortcuts");

var _fixtures = require("./helpers/fixtures");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_ava.default.before('Create feed', async t => {
  // Authorise
  t.context.api = await (0, _shortcuts.getApi)();
  (0, _shortcuts.auth)(t.context.api);
  t.context.feed = await (0, _shortcuts.createFeed)(t, t.context.api);
});

_ava.default.beforeEach('Authorise', async t => {
  t.context.api = await (0, _shortcuts.getApi)();
  (0, _shortcuts.auth)(t.context.api);
});

(0, _ava.default)('Create feed works', async t => {
  const feed = {
    name: 'autotest-feed1',
    description: 'feed generated by api autotest1'
  };
  const resp = await t.context.api.post('/feeds', feed);
  t.is(resp.status, 201, (0, _shortcuts.responseErrMessage)(resp));
}); // Serial because logout influences parallel tests otherwise

_ava.default.serial('Create feed fails without token', async t => {
  (0, _shortcuts.logout)(t.context.api);
  const feed = {
    name: 'autotest-feed',
    description: 'feed generated by api autotest'
  };
  const resp = await t.context.api.post('/feeds', feed);
  t.is(resp.status, 401, (0, _shortcuts.responseErrMessage)(resp));
});

async function createFeedMacro(t, feedObject, expected) {
  const resp = await t.context.api.post('/feeds', feedObject);
  t.is(resp.status, expected, (0, _shortcuts.responseErrMessage)(resp));
}

;

createFeedMacro.title = (providedTitle = '', feedObject, expected) => `Create feed with ${JSON.stringify(feedObject)} returns status ${JSON.stringify(expected, null, 2)}. ${providedTitle}`.trim();

_ava.default.only(createFeedMacro, {
  name: null,
  description: null
}, 400);

_ava.default.only(createFeedMacro, {
  name: null,
  description: 'test'
}, 400);

_ava.default.only(createFeedMacro, {
  name: 'test',
  description: null
}, 201);

_ava.default.only(createFeedMacro, {
  name: undefined,
  description: undefined
}, 400);

_ava.default.only(createFeedMacro, {
  name: 'test1'
}, 201);

_ava.default.only(createFeedMacro, {
  description: 'test1'
}, 400);

(0, _ava.default)('Get all feeds works', async t => {
  const resp = await t.context.api.get('/feeds');
  t.is(resp.status, 200, (0, _shortcuts.responseErrMessage)(resp));
  t.is(resp.data[0].owner.username, _fixtures.ADAFRUIT_IO_USERNAME);
}); // Serial because logout influences parallel tests otherwise

_ava.default.serial('Get all feeds returns empty result without token', async t => {
  (0, _shortcuts.logout)(t.context.api);
  const resp = await t.context.api.get('/feeds');
  t.is(resp.status, 200, (0, _shortcuts.responseErrMessage)(resp));
  t.deepEqual(resp.data, []);
});

(0, _ava.default)('Delete feed works', async t => {
  // Create feed
  const feedObject = {
    name: 'autotest-feed-to-delete',
    description: 'feed generated by api autotest to delete'
  };
  const feed = await (0, _shortcuts.createFeed)(t, t.context.api, feedObject);
  const respDelete = await t.context.api.delete(`/feeds/${feed.key}`);
  t.is(respDelete.status, 200, (0, _shortcuts.responseErrMessage)(respDelete));
});
(0, _ava.default)('Get feed by id works', async t => {
  const resp = await t.context.api.get(`/feeds/${t.context.feed.key}`);
  t.is(resp.status, 200, (0, _shortcuts.responseErrMessage)(resp));
  t.is(resp.data.owner.username, _fixtures.ADAFRUIT_IO_USERNAME);
}); // Serial because logout influences parallel tests otherwise

_ava.default.serial('Get feed by id fails without token', async t => {
  (0, _shortcuts.logout)(t.context.api);
  const resp = await t.context.api.get(`/feeds/${t.context.feed.key}`);
  t.is(resp.status, 404, (0, _shortcuts.responseErrMessage)(resp));
});
//# sourceMappingURL=/home/kate/moeco/adafruit/node_modules/.cache/ava/cfdfd0a4329438b8deaa3e5dbde02bfc.js.map