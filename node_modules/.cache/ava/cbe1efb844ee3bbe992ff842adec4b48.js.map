{"version":3,"sources":["test/feed.test.js"],"names":["test","before","t","context","api","feed","name","description","resp","post","is","status","data","after","get","feeds","feedKey","i","key","respDelete","delete","only","owner","username","value","respData","toString","feed_key"],"mappings":"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","sourceRoot":"/home/kate/moeco/adafruit","sourcesContent":["import test from 'ava';\nimport {\n    getApi,\n    auth,\n    logout,\n    responseErrMessage as err\n} from '../shortcuts';\n\ntest.before('Create feed', async t => {\n    // Authorise\n    t.context.api = await getApi();\n    auth(t.context.api);\n\n    // Create feed\n    const feed = { name: 'autotest-feed-default', description: 'default feed generated by api autotest'};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 201, err(resp));\n    t.context.feed = resp.data;\n});\n\ntest.after('Delete all feeds', async t => {\n    const resp = await t.context.api.get('/feeds');\n    t.is(resp.status, 200, err(resp));\n    const feeds = resp.data;\n    let feedKey;\n    for (let i in feeds) {\n        feedKey = feeds[i].key;\n        const respDelete = await t.context.api.delete(`/feeds/${feedKey}`);\n        t.is(respDelete.status, 200, err(respDelete));\n    }\n});\n\ntest('Create feed works', async t => {\n    const feed = { name: 'autotest-feed', description: 'feed generated by api autotest'};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 201, err(resp));\n});\n\ntest('Create feed fails without token', async t => {\n    logout(t.context.api);\n    const feed = { name: 'autotest-feed12', description: 'feed generated by api autotest12'};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 401, err(resp));\n});\n\ntest('Create feed fails with wrong inputs', async t => {\n    const feed = { name: null, description: null};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 400, err(resp));\n});\n\ntest.only('Get all feeds works', async t => {\n    const resp = await t.context.api.get('/feeds');\n    t.is(resp.status, 200, err(resp));\n    t.is(resp.data[0].owner.username, 'korneed');\n});\n\ntest.only('Delete feed works', async t => {\n    const respDelete = await t.context.api.delete(`/feeds/${t.context.feed.key}`);\n    t.is(respDelete.status, 200, err(respDelete));\n});\n\n// Get all feeds does not work without auth\n// Get feed by id works\n// Get feed by id does not work without auth\n\ntest('Add data to feed works', async t => {\n    const data = {value: 42};\n    const respData = await t.context.api.post(`/feeds/${t.context.feed.key}/data`, data);\n    t.is(respData.status, 200, err(respData));\n    t.is(respData.data.value, data.value.toString());\n    t.is(respData.data.feed_key, t.context.feed.key);\n});\n// And without auth - not\n\n// // Matrix with wrong inputs\n\n// test('Edit data in feed works', async t => {\n//     t.pass();\n// });\n// // And without auth - not\n\n// test('Delete data in feed works', async t => {\n//     t.pass();\n// });\n// // And without auth - not\n\n// // Also add tv4 validation\n\n// test.skip('Feeds are displayed in groups', async t => {\n//     const api = await getApi();\n//     await auth(api);\n//     const resp = await api.get('/groups');\n//     t.is(resp.status, 200);\n//     t.is(resp.data[0].feeds[0].name, 'new_feed');\n// });"]}