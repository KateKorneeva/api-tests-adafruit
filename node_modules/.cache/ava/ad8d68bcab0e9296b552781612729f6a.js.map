{"version":3,"sources":["test/feed.test.js"],"names":["test","before","t","context","api","feed","name","description","resp","post","is","status","only","get","data","owner","username"],"mappings":";;AAAA;;AACA;;;;AAOAA,aAAKC,MAAL,CAAY,oCAAZ,EAAkD,MAAMC,CAAN,IAAW;AACzDA,EAAAA,CAAC,CAACC,OAAF,CAAUC,GAAV,GAAgB,MAAM,wBAAtB;AACA,uBAAKF,CAAC,CAACC,OAAF,CAAUC,GAAf;AACH,CAHD;;AAKA,kBAAK,mBAAL,EAA0B,MAAMF,CAAN,IAAW;AACjC,QAAMG,IAAI,GAAG;AAAEC,IAAAA,IAAI,EAAE,eAAR;AAAyBC,IAAAA,WAAW,EAAE;AAAtC,GAAb;AACA,QAAMC,IAAI,GAAI,MAAMN,CAAC,CAACC,OAAF,CAAUC,GAAV,CAAcK,IAAd,CAAmB,QAAnB,EAA6BJ,IAA7B,CAApB;AACAH,EAAAA,CAAC,CAACQ,EAAF,CAAKF,IAAI,CAACG,MAAV,EAAkB,GAAlB,EAAuB,mCAAIH,IAAJ,CAAvB;AACH,CAJD;AAMA,kBAAK,iCAAL,EAAwC,MAAMN,CAAN,IAAW;AAC/C,yBAAOA,CAAC,CAACC,OAAF,CAAUC,GAAjB;AACA,QAAMC,IAAI,GAAG;AAAEC,IAAAA,IAAI,EAAE,iBAAR;AAA2BC,IAAAA,WAAW,EAAE;AAAxC,GAAb;AACA,QAAMC,IAAI,GAAI,MAAMN,CAAC,CAACC,OAAF,CAAUC,GAAV,CAAcK,IAAd,CAAmB,QAAnB,EAA6BJ,IAA7B,CAApB;AACAH,EAAAA,CAAC,CAACQ,EAAF,CAAKF,IAAI,CAACG,MAAV,EAAkB,GAAlB,EAAuB,mCAAIH,IAAJ,CAAvB;AACH,CALD;AAOA,kBAAK,qCAAL,EAA4C,MAAMN,CAAN,IAAW;AACnD,QAAMG,IAAI,GAAG;AAAEC,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,WAAW,EAAE;AAA3B,GAAb;AACA,QAAMC,IAAI,GAAI,MAAMN,CAAC,CAACC,OAAF,CAAUC,GAAV,CAAcK,IAAd,CAAmB,QAAnB,EAA6BJ,IAA7B,CAApB;AACAH,EAAAA,CAAC,CAACQ,EAAF,CAAKF,IAAI,CAACG,MAAV,EAAkB,GAAlB,EAAuB,mCAAIH,IAAJ,CAAvB;AACH,CAJD;;AAMAR,aAAKY,IAAL,CAAU,qBAAV,EAAiC,MAAMV,CAAN,IAAW;AACxC,QAAMM,IAAI,GAAG,MAAMN,CAAC,CAACC,OAAF,CAAUC,GAAV,CAAcS,GAAd,CAAkB,QAAlB,CAAnB;AACAX,EAAAA,CAAC,CAACQ,EAAF,CAAKF,IAAI,CAACG,MAAV,EAAkB,GAAlB,EAAuB,mCAAIH,IAAJ,CAAvB;AACAN,EAAAA,CAAC,CAACQ,EAAF,CAAKF,IAAI,CAACM,IAAL,CAAU,CAAV,EAAaC,KAAb,CAAmBC,QAAxB,EAAkC,SAAlC;AACH,CAJD,E,CAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourceRoot":"/home/kate/moeco/adafruit","sourcesContent":["import test from 'ava';\nimport {\n    getApi,\n    auth,\n    logout,\n    responseErrMessage as err\n} from '../shortcuts';\n\ntest.before('Add authorization token to request', async t => {\n    t.context.api = await getApi();\n    auth(t.context.api);\n});\n\ntest('Create feed works', async t => {\n    const feed = { name: 'autotest-feed', description: 'feed generated by api autotest'};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 201, err(resp));\n});\n\ntest('Create feed fails without token', async t => {\n    logout(t.context.api);\n    const feed = { name: 'autotest-feed12', description: 'feed generated by api autotest12'};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 401, err(resp));\n});\n\ntest('Create feed fails with wrong inputs', async t => {\n    const feed = { name: null, description: null};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 400, err(resp));\n});\n\ntest.only('Get all feeds works', async t => {\n    const resp = await t.context.api.get('/feeds');\n    t.is(resp.status, 200, err(resp));\n    t.is(resp.data[0].owner.username, 'korneed');\n});\n\n// // Get all feeds does not work without auth\n// // Get feed by id works\n// // Get feed by id does not work without auth\n\n// test('Add data to feed works', async t => {\n//     t.pass();\n// });\n// // And without auth - not\n\n// // Matrix with wrong inputs\n\n// test('Edit data in feed works', async t => {\n//     t.pass();\n// });\n// // And without auth - not\n\n// test('Delete data in feed works', async t => {\n//     t.pass();\n// });\n// // And without auth - not\n\n// test('Create dashboard works', async t => {\n//     t.pass();\n// });\n// // Edit, remove, and all witout auth and then with wrong inpts\n\n// // Also add tv4 validation\n\n// test.skip('Feeds are displayed in groups', async t => {\n//     const api = await getApi();\n//     await auth(api);\n//     const resp = await api.get('/groups');\n//     t.is(resp.status, 200);\n//     t.is(resp.data[0].feeds[0].name, 'new_feed');\n// });"]}