{"version":3,"sources":["test/feed.js"],"names":["test","before","t","context","api","feed","beforeEach","name","description","resp","post","is","status","serial","only","get","data","owner","username","console","log","feedObject","respDelete","delete","key"],"mappings":";;AAAA;;AACA;;;;AAQAA,aAAKC,MAAL,CAAY,aAAZ,EAA2B,MAAMC,CAAN,IAAW;AAClC;AACAA,EAAAA,CAAC,CAACC,OAAF,CAAUC,GAAV,GAAgB,MAAM,wBAAtB;AACA,uBAAKF,CAAC,CAACC,OAAF,CAAUC,GAAf;AAEAF,EAAAA,CAAC,CAACC,OAAF,CAAUE,IAAV,GAAiB,MAAM,2BAAWH,CAAX,EAAcA,CAAC,CAACC,OAAF,CAAUC,GAAxB,CAAvB;AACH,CAND;;AAQAJ,aAAKM,UAAL,CAAgB,WAAhB,EAA6B,MAAMJ,CAAN,IAAW;AACpCA,EAAAA,CAAC,CAACC,OAAF,CAAUC,GAAV,GAAgB,MAAM,wBAAtB;AACA,uBAAKF,CAAC,CAACC,OAAF,CAAUC,GAAf;AACH,CAHD;;AAKA,kBAAK,mBAAL,EAA0B,MAAMF,CAAN,IAAW;AACjC,QAAMG,IAAI,GAAG;AAAEE,IAAAA,IAAI,EAAE,gBAAR;AAA0BC,IAAAA,WAAW,EAAE;AAAvC,GAAb;AACA,QAAMC,IAAI,GAAI,MAAMP,CAAC,CAACC,OAAF,CAAUC,GAAV,CAAcM,IAAd,CAAmB,QAAnB,EAA6BL,IAA7B,CAApB;AACAH,EAAAA,CAAC,CAACS,EAAF,CAAKF,IAAI,CAACG,MAAV,EAAkB,GAAlB,EAAuB,mCAAIH,IAAJ,CAAvB;AACH,CAJD,E,CAMA;;AACAT,aAAKa,MAAL,CAAY,iCAAZ,EAA+C,MAAMX,CAAN,IAAW;AACtD,yBAAOA,CAAC,CAACC,OAAF,CAAUC,GAAjB;AAEA,QAAMC,IAAI,GAAG;AAAEE,IAAAA,IAAI,EAAE,eAAR;AAAyBC,IAAAA,WAAW,EAAE;AAAtC,GAAb;AACA,QAAMC,IAAI,GAAI,MAAMP,CAAC,CAACC,OAAF,CAAUC,GAAV,CAAcM,IAAd,CAAmB,QAAnB,EAA6BL,IAA7B,CAApB;AACAH,EAAAA,CAAC,CAACS,EAAF,CAAKF,IAAI,CAACG,MAAV,EAAkB,GAAlB,EAAuB,mCAAIH,IAAJ,CAAvB;AACH,CAND;;AAQA,kBAAK,qCAAL,EAA4C,MAAMP,CAAN,IAAW;AACnD,QAAMG,IAAI,GAAG;AAAEE,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,WAAW,EAAE;AAA3B,GAAb;AACA,QAAMC,IAAI,GAAI,MAAMP,CAAC,CAACC,OAAF,CAAUC,GAAV,CAAcM,IAAd,CAAmB,QAAnB,EAA6BL,IAA7B,CAApB;AACAH,EAAAA,CAAC,CAACS,EAAF,CAAKF,IAAI,CAACG,MAAV,EAAkB,GAAlB,EAAuB,mCAAIH,IAAJ,CAAvB;AACH,CAJD;;AAMAT,aAAKc,IAAL,CAAU,qBAAV,EAAiC,MAAMZ,CAAN,IAAW;AACxC,QAAMO,IAAI,GAAG,MAAMP,CAAC,CAACC,OAAF,CAAUC,GAAV,CAAcW,GAAd,CAAkB,QAAlB,CAAnB;AACAb,EAAAA,CAAC,CAACS,EAAF,CAAKF,IAAI,CAACG,MAAV,EAAkB,GAAlB,EAAuB,mCAAIH,IAAJ,CAAvB;AACAP,EAAAA,CAAC,CAACS,EAAF,CAAKF,IAAI,CAACO,IAAL,CAAU,CAAV,EAAaC,KAAb,CAAmBC,QAAxB,EAAkC,SAAlC;AACH,CAJD,E,CAMA;;;AACAlB,aAAKa,MAAL,CAAYC,IAAZ,CAAiB,kDAAjB,EAAqE,MAAMZ,CAAN,IAAW;AAC5E,yBAAOA,CAAC,CAACC,OAAF,CAAUC,GAAjB;AAEA,QAAMK,IAAI,GAAG,MAAMP,CAAC,CAACC,OAAF,CAAUC,GAAV,CAAcW,GAAd,CAAkB,QAAlB,CAAnB;AACAb,EAAAA,CAAC,CAACS,EAAF,CAAKF,IAAI,CAACG,MAAV,EAAkB,GAAlB,EAAuB,mCAAIH,IAAJ,CAAvB;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYX,IAAI,CAACO,IAAjB,EAL4E,CAM5E;AACH,CAPD;;AASA,kBAAK,mBAAL,EAA0B,MAAMd,CAAN,IAAW;AACjC;AACA,QAAMmB,UAAU,GAAG;AAAEd,IAAAA,IAAI,EAAE,yBAAR;AAAmCC,IAAAA,WAAW,EAAE;AAAhD,GAAnB;AACA,QAAMH,IAAI,GAAG,MAAM,2BAAWH,CAAX,EAAcA,CAAC,CAACC,OAAF,CAAUC,GAAxB,EAA6BiB,UAA7B,CAAnB;AAEA,QAAMC,UAAU,GAAG,MAAMpB,CAAC,CAACC,OAAF,CAAUC,GAAV,CAAcmB,MAAd,CAAsB,UAASlB,IAAI,CAACmB,GAAI,EAAxC,CAAzB;AACAtB,EAAAA,CAAC,CAACS,EAAF,CAAKW,UAAU,CAACV,MAAhB,EAAwB,GAAxB,EAA6B,mCAAIU,UAAJ,CAA7B;AACH,CAPD;AASA,kBAAK,sBAAL,EAA6B,MAAMpB,CAAN,IAAW;AACpC,QAAMO,IAAI,GAAG,MAAMP,CAAC,CAACC,OAAF,CAAUC,GAAV,CAAcW,GAAd,CAAmB,UAASb,CAAC,CAACC,OAAF,CAAUE,IAAV,CAAemB,GAAI,EAA/C,CAAnB;AACAtB,EAAAA,CAAC,CAACS,EAAF,CAAKF,IAAI,CAACG,MAAV,EAAkB,GAAlB,EAAuB,mCAAIH,IAAJ,CAAvB;AACAP,EAAAA,CAAC,CAACS,EAAF,CAAKF,IAAI,CAACO,IAAL,CAAUC,KAAV,CAAgBC,QAArB,EAA+B,SAA/B;AACH,CAJD,E,CAMA;;AACAlB,aAAKa,MAAL,CAAY,oCAAZ,EAAkD,MAAMX,CAAN,IAAW;AACzD,yBAAOA,CAAC,CAACC,OAAF,CAAUC,GAAjB;AAEA,QAAMK,IAAI,GAAG,MAAMP,CAAC,CAACC,OAAF,CAAUC,GAAV,CAAcW,GAAd,CAAmB,UAASb,CAAC,CAACC,OAAF,CAAUE,IAAV,CAAemB,GAAI,EAA/C,CAAnB;AACAtB,EAAAA,CAAC,CAACS,EAAF,CAAKF,IAAI,CAACG,MAAV,EAAkB,GAAlB,EAAuB,mCAAIH,IAAJ,CAAvB;AACH,CALD,E,CAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourceRoot":"/home/kate/moeco/adafruit","sourcesContent":["import test from 'ava';\nimport {\n    getApi,\n    auth,\n    logout,\n    responseErrMessage as err,\n    createFeed\n} from './helpers/shortcuts';\n\ntest.before('Create feed', async t => {\n    // Authorise\n    t.context.api = await getApi();\n    auth(t.context.api);\n\n    t.context.feed = await createFeed(t, t.context.api);\n});\n\ntest.beforeEach('Authorise', async t => {\n    t.context.api = await getApi();\n    auth(t.context.api);\n});\n\ntest('Create feed works', async t => {\n    const feed = { name: 'autotest-feed1', description: 'feed generated by api autotest1'};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 201, err(resp));\n});\n\n// Serial because logout influences parallel tests otherwise\ntest.serial('Create feed fails without token', async t => {\n    logout(t.context.api);\n\n    const feed = { name: 'autotest-feed', description: 'feed generated by api autotest'};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 401, err(resp));\n});\n\ntest('Create feed fails with wrong inputs', async t => {\n    const feed = { name: null, description: null};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 400, err(resp));\n});\n\ntest.only('Get all feeds works', async t => {\n    const resp = await t.context.api.get('/feeds');\n    t.is(resp.status, 200, err(resp));\n    t.is(resp.data[0].owner.username, 'korneed');\n});\n\n// Serial because logout influences parallel tests otherwise\ntest.serial.only('Get all feeds returns empty result without token', async t => {\n    logout(t.context.api);\n\n    const resp = await t.context.api.get('/feeds');\n    t.is(resp.status, 200, err(resp));\n    console.log(resp.data);\n    // t.is(resp.data[0].owner.username, 'korneed');\n});\n\ntest('Delete feed works', async t => {\n    // Create feed\n    const feedObject = { name: 'autotest-feed-to-delete', description: 'feed generated by api autotest to delete'};\n    const feed = await createFeed(t, t.context.api, feedObject);\n\n    const respDelete = await t.context.api.delete(`/feeds/${feed.key}`);\n    t.is(respDelete.status, 200, err(respDelete));\n});\n\ntest('Get feed by id works', async t => {\n    const resp = await t.context.api.get(`/feeds/${t.context.feed.key}`);\n    t.is(resp.status, 200, err(resp));\n    t.is(resp.data.owner.username, 'korneed');\n});\n\n// Serial because logout influences parallel tests otherwise\ntest.serial('Get feed by id fails without token', async t => {\n    logout(t.context.api);\n\n    const resp = await t.context.api.get(`/feeds/${t.context.feed.key}`);\n    t.is(resp.status, 404, err(resp));\n});\n\n// // Also add tv4 validation\n\n// test.skip('Feeds are displayed in groups', async t => {\n//     const api = await getApi();\n//     await auth(api);\n//     const resp = await api.get('/groups');\n//     t.is(resp.status, 200);\n//     t.is(resp.data[0].feeds[0].name, 'new_feed');\n// });"]}