{"version":3,"sources":["test/feed.test.js"],"names":["test","before","t","context","api","after","resp","get","is","status","feeds","data","feedKey","i","key","respDelete","delete","feed","name","description","post","owner","username","respFeed","value","respData","toString","feed_key"],"mappings":"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","sourceRoot":"/home/kate/moeco/adafruit","sourcesContent":["import test from 'ava';\nimport {\n    getApi,\n    auth,\n    logout,\n    responseErrMessage as err\n} from '../shortcuts';\n\ntest.before('Add authorization token to request', async t => {\n    t.context.api = await getApi();\n    auth(t.context.api);\n});\n\ntest.after('Delete all feeds', async t => {\n    const resp = await t.context.api.get('/feeds');\n    t.is(resp.status, 200, err(resp));\n    const feeds = resp.data;\n    let feedKey;\n    for (let i in feeds) {\n        feedKey = feeds[i].key;\n        const respDelete = await t.context.api.delete(`/feeds/${feedKey}`);\n        t.is(respDelete.status, 200, err(respDelete));\n    }\n});\n\ntest('Create feed works', async t => {\n    const feed = { name: 'autotest-feed', description: 'feed generated by api autotest'};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 201, err(resp));\n});\n\ntest('Create feed fails without token', async t => {\n    logout(t.context.api);\n    const feed = { name: 'autotest-feed12', description: 'feed generated by api autotest12'};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 401, err(resp));\n});\n\ntest('Create feed fails with wrong inputs', async t => {\n    const feed = { name: null, description: null};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 400, err(resp));\n});\n\ntest('Get all feeds works', async t => {\n    const resp = await t.context.api.get('/feeds');\n    t.is(resp.status, 200, err(resp));\n    t.is(resp.data[0].owner.username, 'korneed');\n});\n\ntest('Delete feed works', async t => {\n    const feed = { name: 'autotest-feed-with-data', description: 'feed with data generated by api autotest'};\n    const respFeed  = await t.context.api.post('/feeds', feed);\n    t.is(respFeed.status, 201, err(respFeed));\n    const feedKey = respFeed.data.key;\n\n    const respDelete = await t.context.api.delete(`/feeds/${feedKey}`);\n    t.is(respDelete.status, 200, err(respDelete));\n});\n\n// Get all feeds does not work without auth\n// Get feed by id works\n// Get feed by id does not work without auth\n\ntest('Add data to feed works', async t => {\n    const feed = { name: 'autotest-feed-with-data', description: 'feed with data generated by api autotest'};\n    const respFeed  = await t.context.api.post('/feeds', feed);\n    t.is(respFeed.status, 201, err(respFeed));\n    const feedKey = respFeed.data.key;\n\n    const data = {value: 42};\n    const respData = await t.context.api.post(`/feeds/${feedKey}/data`, data);\n    t.is(respData.status, 200, err(respData));\n    t.is(respData.data.value, data.value.toString());\n    t.is(respData.data.feed_key, feedKey);\n});\n// And without auth - not\n\n// // Matrix with wrong inputs\n\n// test('Edit data in feed works', async t => {\n//     t.pass();\n// });\n// // And without auth - not\n\n// test('Delete data in feed works', async t => {\n//     t.pass();\n// });\n// // And without auth - not\n\n// // Also add tv4 validation\n\n// test.skip('Feeds are displayed in groups', async t => {\n//     const api = await getApi();\n//     await auth(api);\n//     const resp = await api.get('/groups');\n//     t.is(resp.status, 200);\n//     t.is(resp.data[0].feeds[0].name, 'new_feed');\n// });"]}