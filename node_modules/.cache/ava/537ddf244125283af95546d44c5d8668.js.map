{"version":3,"sources":["test/feed.js"],"names":["test","before","t","context","api","feed","name","description","resp","post","is","status","serial","get","data","owner","username","respFeed","feedKey","key","respDelete","delete"],"mappings":"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","sourceRoot":"/home/kate/moeco/adafruit","sourcesContent":["import test from 'ava';\nimport {\n    getApi,\n    auth,\n    logout,\n    responseErrMessage as err,\n    createFeed\n} from './helpers/shortcuts';\n\ntest.before('Create feed', async t => {\n    // Authorise\n    t.context.api = await getApi();\n    auth(t.context.api);\n\n    t.context.feed = await createFeed(t);\n});\n\ntest('Create feed works', async t => {\n    const feed = { name: 'autotest-feed1', description: 'feed generated by api autotest1'};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 201, err(resp));\n});\n\ntest.serial('Create feed fails without token', async t => {\n    logout(t.context.api);\n    const feed = { name: 'autotest-feed', description: 'feed generated by api autotest'};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 401, err(resp));\n\n    auth(t.context.api);\n});\n\ntest('Create feed fails with wrong inputs', async t => {\n    const feed = { name: null, description: null};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 400, err(resp));\n});\n\ntest('Get all feeds works', async t => {\n    const resp = await t.context.api.get('/feeds');\n    t.is(resp.status, 200, err(resp));\n    t.is(resp.data[0].owner.username, 'korneed');\n});\n\ntest('Delete feed works', async t => {\n    // Create feed\n    const feed = { name: 'autotest-feed-to-delete', description: 'feed generated by api autotest to delete'};\n    const respFeed  = await t.context.api.post('/feeds', feed);\n    t.is(respFeed.status, 201, err(respFeed));\n    const feedKey = respFeed.data.key;\n\n    const respDelete = await t.context.api.delete(`/feeds/${feedKey}`);\n    t.is(respDelete.status, 200, err(respDelete));\n});\n\n// Get all feeds does not work without auth\n// Get feed by id works\n// Get feed by id does not work without auth\n\n// // Also add tv4 validation\n\n// test.skip('Feeds are displayed in groups', async t => {\n//     const api = await getApi();\n//     await auth(api);\n//     const resp = await api.get('/groups');\n//     t.is(resp.status, 200);\n//     t.is(resp.data[0].feeds[0].name, 'new_feed');\n// });"]}