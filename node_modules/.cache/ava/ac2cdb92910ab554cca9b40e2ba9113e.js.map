{"version":3,"sources":["test/feed.test.js"],"names":["test","before","t","context","api","respFeeds","get","is","status","feeds","data","feedKey","i","key","respDelete","delete","feed","name","description","resp","post","only","owner","username","value","respData","toString","feed_key"],"mappings":"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","sourceRoot":"/home/kate/moeco/adafruit","sourcesContent":["import test from 'ava';\nimport {\n    getApi,\n    auth,\n    logout,\n    responseErrMessage as err\n} from '../shortcuts';\n\ntest.before('Create feed', async t => {\n    // Authorise\n    t.context.api = await getApi();\n    auth(t.context.api);\n\n    // Delete all existing feeds\n    const respFeeds = await t.context.api.get('/feeds');\n    t.is(respFeeds.status, 200, err(respFeeds));\n    const feeds = respFeeds.data;\n    let feedKey;\n    for (let i in feeds) {\n        feedKey = feeds[i].key;\n        const respDelete = await t.context.api.delete(`/feeds/${feedKey}`);\n        t.is(respDelete.status, 200, err(respDelete));\n    }\n\n    // Create feed\n    const feed = { name: 'autotest-feed-default', description: 'default feed generated by api autotest'};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 201, err(resp));\n    t.context.feed = resp.data;\n});\n\ntest('Create feed works', async t => {\n    const feed = { name: 'autotest-feed1', description: 'feed generated by api autotest1'};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 201, err(resp));\n});\n\ntest('Create feed fails without token', async t => {\n    logout(t.context.api);\n    const feed = { name: 'autotest-feed', description: 'feed generated by api autotest'};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 401, err(resp));\n});\n\ntest('Create feed fails with wrong inputs', async t => {\n    const feed = { name: null, description: null};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 400, err(resp));\n});\n\ntest.only('Get all feeds works', async t => {\n    const resp = await t.context.api.get('/feeds');\n    t.is(resp.status, 200, err(resp));\n    t.is(resp.data[0].owner.username, 'korneed');\n});\n\n// test('Delete feed works', async t => {\n//     const respDelete = await t.context.api.delete(`/feeds/${t.context.feed.key}`);\n//     t.is(respDelete.status, 200, err(respDelete));\n// });\n\n// Get all feeds does not work without auth\n// Get feed by id works\n// Get feed by id does not work without auth\n\ntest('Add data to feed works', async t => {\n    const data = { value: 42 };\n    const respData = await t.context.api.post(`/feeds/${t.context.feed.key}/data`, data);\n    t.is(respData.status, 200, err(respData));\n    t.is(respData.data.value, data.value.toString());\n    t.is(respData.data.feed_key, t.context.feed.key);\n});\n// And without auth - not\n\n// // Matrix with wrong inputs\n\n// test('Edit data in feed works', async t => {\n//     t.pass();\n// });\n// // And without auth - not\n\n// test('Delete data in feed works', async t => {\n//     t.pass();\n// });\n// // And without auth - not\n\n// // Also add tv4 validation\n\n// test.skip('Feeds are displayed in groups', async t => {\n//     const api = await getApi();\n//     await auth(api);\n//     const resp = await api.get('/groups');\n//     t.is(resp.status, 200);\n//     t.is(resp.data[0].feeds[0].name, 'new_feed');\n// });"]}