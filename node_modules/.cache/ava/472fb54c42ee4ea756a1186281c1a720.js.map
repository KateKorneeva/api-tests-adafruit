{"version":3,"sources":["test/feed.js"],"names":["test","before","t","context","api","feed","beforeEach","name","description","resp","post","is","status","serial","createFeedMacro","feedObject","expected","title","providedTitle","JSON","stringify","trim","undefined","resp1","resp2","get","data","owner","username","user","deepEqual","respDelete","delete","key"],"mappings":"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","sourceRoot":"/home/kate/moeco/adafruit","sourcesContent":["import test from 'ava';\nimport {\n    getApi,\n    auth,\n    logout,\n    responseErrMessage as err,\n    createFeed\n} from './helpers/shortcuts';\n\nimport { ADAFRUIT_IO_USERNAME as user } from './helpers/fixtures';\n\ntest.before('Create feed', async t => {\n    // Authorise\n    t.context.api = await getApi();\n    auth(t.context.api);\n\n    t.context.feed = await createFeed(t, t.context.api);\n});\n\ntest.beforeEach('Authorise', async t => {\n    t.context.api = await getApi();\n    auth(t.context.api);\n});\n\ntest('Create feed works', async t => {\n    const feed = { name: 'autotest-feed', description: 'feed generated by api autotest'};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 201, err(resp));\n});\n\n// Serial because logout influences parallel tests otherwise\ntest.serial('Create feed fails without token', async t => {\n    logout(t.context.api);\n\n    const feed = { name: 'autotest-feed', description: 'feed generated by api autotest'};\n    const resp  = await t.context.api.post('/feeds', feed);\n    t.is(resp.status, 401, err(resp));\n});\n\nasync function createFeedMacro(t, feedObject, expected) {\n    const resp  = await t.context.api.post('/feeds', feedObject);\n    t.is(resp.status, expected, err(resp));\n};\ncreateFeedMacro.title = (providedTitle = '', feedObject, expected) => `Create feed with ${ JSON.stringify(feedObject) } returns status ${ JSON.stringify(expected, null, 2) }. ${providedTitle}`.trim();\n\n\ntest(createFeedMacro, {name: null, description: null}, 400);\ntest(createFeedMacro, {name: null, description: 'test0'}, 400);\ntest(createFeedMacro, {name: 'test0', description: null}, 201);\ntest(createFeedMacro, {name: undefined, description: undefined}, 400);\ntest(createFeedMacro, {name: 'test1'}, 201);\ntest('Without name feed is not created', createFeedMacro, {description: 'test1'}, 400);\n\ntest('Create feed with not unique name fails', async t => {\n    const feed = { name: 'autotest-feed-not-unique'};\n    const resp1  = await t.context.api.post('/feeds', feed);\n    t.is(resp1.status, 201, err(resp1));\n\n    const resp2  = await t.context.api.post('/feeds', feed);\n    t.is(resp2.status, 400, err(resp2));\n});\n\ntest('Get all feeds works', async t => {\n    const resp = await t.context.api.get('/feeds');\n    t.is(resp.status, 200, err(resp));\n    t.is(resp.data[0].owner.username, user);\n});\n\n// Serial because logout influences parallel tests otherwise\ntest.serial('Get all feeds returns empty result without token', async t => {\n    logout(t.context.api);\n\n    const resp = await t.context.api.get('/feeds');\n    t.is(resp.status, 200, err(resp));\n    t.deepEqual(resp.data, []);\n});\n\ntest('Delete feed works', async t => {\n    // Create feed\n    const feedObject = { name: 'autotest-feed-to-delete', description: 'feed generated by api autotest to delete'};\n    const feed = await createFeed(t, t.context.api, feedObject);\n\n    const respDelete = await t.context.api.delete(`/feeds/${feed.key}`);\n    t.is(respDelete.status, 200, err(respDelete));\n});\n\ntest('Get feed by id works', async t => {\n    const resp = await t.context.api.get(`/feeds/${t.context.feed.key}`);\n    t.is(resp.status, 200, err(resp));\n    t.is(resp.data.owner.username, user);\n});\n\n// Serial because logout influences parallel tests otherwise\ntest.serial('Get feed by id fails without token', async t => {\n    logout(t.context.api);\n\n    const resp = await t.context.api.get(`/feeds/${t.context.feed.key}`);\n    t.is(resp.status, 404, err(resp));\n});"]}